n = C + T(n - 1); n>1
	d; n <= 1

first 2 lines O(1)
line 3 O(1) + T(n-1)
	if n>1
	T(n) = T(n-1) + c
	T(n - 1) = T(n-2) + c + c
	T(n) = T(n-i)+ic
		if i=n-1
	T(n-1) = T(1)+(n-1)c
	T(n-1) = d + c(n-1)
	T(n) is o(n)
	omega(n) = T(1)
	
lines 5,6,7 takes O(1) due to constant
2-7 is O(n-1) due to loop n-1
execution time = n-1
	T(n) = n(n-1)/2 = n^2/2 - n/2 if c = 1
	T(n) is O(n^2)
	for omega n-1 = 1 summation n-1 , n-1 = T(n)
	T(n) is omega(n^2)
	
n/(log n)^2, n/(log n), n/log(log n), n log(log n), n log n, n (log n)^2

change 7 to 2 to get 2^k
change n <= 1 to n < 1
if k = 2
	then 2*2*1
begin
	if n<1 then
		return 1
	else 
		return (-2*power(n-1))
end